{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 15,
  "boxShadow": "none",
  "defaultModel": "{{\n{\n    \"REF1\": PMS_INVOICE_LM.INVOICE_REF1.data,\n    \"REF2\": PMS_INVOICE_LM.INVOICE_REF2.data, \n    \"REF3\": PMS_INVOICE_LM.INVOICE_REF3.data,\n\t\t\"fontsize\" : 15\n}\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [],
  "events": [],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "2esrflee4p",
  "leftColumn": 10,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 194,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 10,
  "mobileTopRow": 164,
  "needsErrorInfo": false,
  "parentColumnSpace": 20.25,
  "parentId": "o4zgzry0s2",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 59,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ":root {\n  font-family: \"Nunito Sans\";\n}\n\n.grouped-inputs {\n  display: flex;\n  flex-direction: column;\n  gap: 1px;\n  height: calc(var(--appsmith-ui-height) * 1px - 40px);\n  width: calc(var(--appsmith-ui-width) * 1px - 25px);\n  justify-content: Top;\n  padding: 1px 5px;\n  box-sizing: border-box;\n}\n\n.group-input {\n  width: 100%;\n  font-size: calc(var(--appsmith-model-fontsize) * 1px);\n  height: 17px;\n  padding: 12px 0 12px 0;\n  background: none;\n  outline: none;\n  border: none;\n  border-radius: 0;\n  color: #2c2939;\n  font-family: inherit;\n  box-sizing: border-box;\n  border-bottom: 1.5px solid transparent;\n  transition: border-bottom 0.2s;\n}\n\n.group-input:focus {\n  border-bottom: 1.5px solid #E0DEDE;\n  background: #f0f7ff;\n}\n\n.group-input::placeholder {\n  color: #b8b8b8;\n  opacity: 1;\n  font-size: calc(var(--appsmith-model-fontsize) * 1px);\n  font-family: inherit;\n}",
    "html": "<style>\n@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700&display=swap');\n</style>\n<div id=\"root\"></div>\n\n",
    "js": "// Vanilla React and DOM for input focus forwarding.\nimport React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\nfunction InputGroup() {\n  // Use appsmith.model for default/fallback values\n  const [values, setValues] = React.useState({\n    REF1: appsmith.model.REF1 ?? \"\",\n    REF2: appsmith.model.REF2 ?? \"\",\n    REF3: appsmith.model.REF3 ?? \"\"\n  });\n\n  // NEW: Add a ref for the first input\n  const input1Ref = React.useRef(null);\n  const input2Ref = React.useRef(null);\n  const input3Ref = React.useRef(null);\n  React.useEffect(() => {\n    appsmith.onModelChange(model => {\n      setValues({\n        REF1: model.REF1 ?? \"\",\n        REF2: model.REF2 ?? \"\",\n        REF3: model.REF3 ?? \"\"\n      });\n    });\n  }, []);\n\n  // Handle input change and update model\n  const handleChange = idx => e => {\n    const inputVals = [\"REF1\", \"REF2\", \"REF3\"];\n    let newVals = {\n      ...values,\n      [inputVals[idx]]: e.target.value\n    };\n    setValues(newVals);\n    appsmith.updateModel(newVals);\n  };\n\n  // When input reaches maxlength, focus on next input\n  const handleInput = idx => e => {\n    const val = e.target.value;\n    if (val.length === 70 && idx < 2) {\n      if (idx === 0) input2Ref.current && input2Ref.current.focus();\n      if (idx === 1) input3Ref.current && input3Ref.current.focus();\n    }\n  };\n\n  // UPDATED: handleKeyDown now also manages backward focus\n  const handleKeyDown = idx => e => {\n    // Move focus forward on 'Enter'\n    if (e.key === 'Enter') {\n      e.preventDefault(); // Prevent default form submission\n      if (idx === 0) input2Ref.current && input2Ref.current.focus();\n      if (idx === 1) input3Ref.current && input3Ref.current.focus();\n    }\n    // NEW: Move focus backward on 'Backspace' if input is empty\n    else if (e.key === 'Backspace' && e.target.value === '') {\n      if (idx === 2) input2Ref.current && input2Ref.current.focus();\n      if (idx === 1) input1Ref.current && input1Ref.current.focus();\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grouped-inputs\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"input1\",\n    className: \"group-input\",\n    maxLength: 70,\n    autoComplete: \"off\",\n    spellCheck: false,\n    placeholder: \"REF1\",\n    value: values.REF1,\n    onChange: handleChange(0),\n    onInput: handleInput(0),\n    onKeyDown: handleKeyDown(0),\n    ref: input1Ref // Add ref to the first input\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"input2\",\n    className: \"group-input\",\n    maxLength: 70,\n    autoComplete: \"off\",\n    spellCheck: false,\n    placeholder: \"REF2\",\n    value: values.REF2,\n    onChange: handleChange(1),\n    onInput: handleInput(1),\n    onKeyDown: handleKeyDown(1),\n    ref: input2Ref\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"input3\",\n    className: \"group-input\",\n    maxLength: 70,\n    autoComplete: \"off\",\n    spellCheck: false,\n    placeholder: \"REF3\",\n    value: values.REF3,\n    onChange: handleChange(2),\n    onKeyDown: handleKeyDown(2),\n    ref: input3Ref\n  }));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(InputGroup, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 4,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ":root {\n  font-family: \"Nunito Sans\";\n}\n.grouped-inputs {\n  display: flex;\n  flex-direction: column;\n  gap: 1px;\n  height: calc( calc(var(--appsmith-ui-height) * 1px) - 40px);\n  width: calc( calc(var(--appsmith-ui-width) * 1px) - 25px);\n  justify-content: Top;\n  padding: 1px 5px;\n  box-sizing: border-box;\n}\n.group-input {\n  width: 100%;\n  font-size: calc(var(--appsmith-model-fontsize) * 1px);\n\theight:17px;\n  padding: 12px 0 12px 0;\n  background: none;\n  outline: none;\n  border: none;\n  border-radius: 0;\n  color: #2c2939;\n  font-family: inherit;\n  box-sizing: border-box;\n  border-bottom: 1.5px solid transparent;\n  transition: border-bottom 0.2s;\n}\n.group-input:focus {\n  border-bottom: 1.5px solid #E0DEDE;\n  background: #f0f7ff;\n}\n.group-input::placeholder {\n  color: #b8b8b8;\n  opacity: 1;\n\tfont-size: calc(var(--appsmith-model-fontsize) * 1px);\n\tfont-family: inherit;\n}\n",
    "html": "<style>\n@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;700&display=swap');\n</style>\n<div id=\"root\"></div>\n\n",
    "js": "// Vanilla React and DOM for input focus forwarding.\nimport React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\nfunction InputGroup() {\n  // Use appsmith.model for default/fallback values\n  const [values, setValues] = React.useState({\n    REF1: appsmith.model.REF1 ?? \"\",\n    REF2: appsmith.model.REF2 ?? \"\",\n    REF3: appsmith.model.REF3 ?? \"\",\n  });\n\n  // NEW: Add a ref for the first input\n  const input1Ref = React.useRef(null);\n  const input2Ref = React.useRef(null);\n  const input3Ref = React.useRef(null);\n\n  React.useEffect(() => {\n    appsmith.onModelChange((model) => {\n      setValues({\n        REF1: model.REF1 ?? \"\",\n        REF2: model.REF2 ?? \"\",\n        REF3: model.REF3 ?? \"\",\n      });\n    });\n  }, []);\n\n  // Handle input change and update model\n  const handleChange = (idx) => (e) => {\n    const inputVals = [\"REF1\", \"REF2\", \"REF3\"];\n    let newVals = { ...values,\n      [inputVals[idx]]: e.target.value\n    };\n    setValues(newVals);\n    appsmith.updateModel(newVals);\n  };\n\n  // When input reaches maxlength, focus on next input\n  const handleInput = (idx) => (e) => {\n    const val = e.target.value;\n    if (val.length === 70 && idx < 2) {\n      if (idx === 0) input2Ref.current && input2Ref.current.focus();\n      if (idx === 1) input3Ref.current && input3Ref.current.focus();\n    }\n  };\n\n  // UPDATED: handleKeyDown now also manages backward focus\n  const handleKeyDown = (idx) => (e) => {\n    // Move focus forward on 'Enter'\n    if (e.key === 'Enter') {\n      e.preventDefault(); // Prevent default form submission\n      if (idx === 0) input2Ref.current && input2Ref.current.focus();\n      if (idx === 1) input3Ref.current && input3Ref.current.focus();\n    }\n    // NEW: Move focus backward on 'Backspace' if input is empty\n    else if (e.key === 'Backspace' && e.target.value === '') {\n      if (idx === 2) input2Ref.current && input2Ref.current.focus();\n      if (idx === 1) input1Ref.current && input1Ref.current.focus();\n    }\n  };\n\n  return (\n    <div className=\"grouped-inputs\">\n      <input\n        type=\"text\"\n        id=\"input1\"\n        className=\"group-input\"\n        maxLength={70}\n        autoComplete=\"off\"\n        spellCheck={false}\n        placeholder=\"REF1\"\n        value={values.REF1}\n        onChange={handleChange(0)}\n        onInput={handleInput(0)}\n        onKeyDown={handleKeyDown(0)}\n        ref={input1Ref} // Add ref to the first input\n      />\n      <input\n        type=\"text\"\n        id=\"input2\"\n        className=\"group-input\"\n        maxLength={70}\n        autoComplete=\"off\"\n        spellCheck={false}\n        placeholder=\"REF2\"\n        value={values.REF2}\n        onChange={handleChange(1)}\n        onInput={handleInput(1)}\n        onKeyDown={handleKeyDown(1)}\n        ref={input2Ref}\n      />\n      <input\n        type=\"text\"\n        id=\"input3\"\n        className=\"group-input\"\n        maxLength={70}\n        autoComplete=\"off\"\n        spellCheck={false}\n        placeholder=\"REF3\"\n        value={values.REF3}\n        onChange={handleChange(2)}\n        onKeyDown={handleKeyDown(2)}\n        ref={input3Ref}\n      />\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<InputGroup />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "gn3th6r7ci",
  "widgetName": "INVOICE_REMARK"
}